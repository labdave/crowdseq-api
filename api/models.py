import uuid

from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()


class DiagnosisCategory(models.Model):
    """Model for managing the universe of diagnosis categories"""
    name = models.CharField(max_length=255, unique=True)
    description = models.TextField(blank=True, null=True)


class Diagnosis(models.Model):
    """Model for managing the universe of diagnoses ( Diagnosis List )"""
    name = models.CharField(max_length=255, unique=True)
    display_name = models.TextField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    category = models.ForeignKey(DiagnosisCategory, blank=True, null=True, on_delete=models.SET_NULL)


class Genes(models.Model):
    hgnc_gene_id = models.IntegerField(unique=True)
    api_key = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    accession_numbers = models.TextField(blank=True, null=True)
    alias_names = models.TextField(blank=True, null=True)
    alias_symbols = models.TextField(blank=True, null=True)
    approved_name = models.TextField(blank=True, null=True)
    approved_symbol = models.TextField(blank=True, null=True)
    ccds_ids = models.TextField(blank=True, null=True)
    chromosome = models.TextField()
    gene_group_name = models.TextField(blank=True, null=True)
    gene_group_id = models.TextField(blank=True, null=True)
    date_approved = models.DateField(blank=True, null=True)
    enzyme_ids = models.TextField(blank=True, null=True)
    locus_group = models.TextField()
    locus_type = models.TextField()
    ensembl_gene_id = models.TextField(blank=True, null=True)
    locus_specific_gene_id = models.TextField(blank=True, null=True)
    ncbi_gene_id = models.IntegerField(blank=True, null=True)
    previous_name = models.TextField(blank=True, null=True)
    previous_symbols = models.TextField(blank=True, null=True)
    pubmed_ids = models.TextField(blank=True, null=True)
    refseq_ids = models.TextField(blank=True, null=True)
    status = models.TextField()
    uniprot_id = models.TextField(blank=True, null=True)
    vega_ids = models.TextField(blank=True, null=True)
    omim_id = models.TextField(blank=True, null=True)
    ucsc_id = models.TextField(blank=True, null=True)


class GeneAnnotation(models.Model):
    gene = models.ForeignKey(Genes, related_name="annotations", on_delete=models.CASCADE)
    annotation = models.TextField(blank=False, null=False)
    priority = models.IntegerField(blank=False, null=False)
    user = models.ForeignKey(User, db_column="user", null=True, blank=True, on_delete=models.CASCADE)
    creation_timestamp = models.DateTimeField(db_column='creation_timestamp', auto_now_add=True)
    diagnosis = models.ForeignKey(DiagnosisCategory, blank=True, null=True, on_delete=models.CASCADE, related_name='gene_annotations')
    ds_id = models.IntegerField(blank=True, null=True)


class Transcript(models.Model):
    ensembl_transcript_id = models.TextField(blank=False, null=False, unique=True)
    transcript_support_level = models.TextField(blank=True, null=True)
    transcript_length = models.IntegerField(blank=True, null=True)
    refseq_match = models.TextField(blank=True, null=True)
    canonical = models.BooleanField(blank=False, null=False, default=False)


class EnsemblPeptide(models.Model):
    transcript = models.ForeignKey(Transcript, on_delete=models.CASCADE, related_name='peptides')
    peptide_id = models.TextField(blank=False, null=False)
    hgvsp_id = models.TextField(blank=True, null=True)
    md5sum = models.TextField(unique=True)


class EnsemblHGVSC(models.Model):
    transcript = models.ForeignKey(Transcript, on_delete=models.CASCADE, related_name='hgvsc')
    hgvsc_id = models.TextField(blank=False, null=False, unique=True)


class RefSeqTranscript(models.Model):
    transcript = models.ForeignKey(Transcript, on_delete=models.CASCADE, related_name='refseq_transcripts')
    refseq_transcript_id = models.TextField(blank=False, null=False, unique=True)
    transcript_type = models.TextField(blank=False, null=False)


class RefSeqHGVSC(models.Model):
    transcript = models.ForeignKey(RefSeqTranscript, on_delete=models.CASCADE, related_name='hgvsc')
    hgvsc_id = models.TextField(blank=False, null=False, unique=True)
    transcript_type = models.TextField(blank=False, null=False)


class RefSeqPeptide(models.Model):
    transcript = models.ForeignKey(RefSeqTranscript, on_delete=models.CASCADE, related_name='peptides')
    peptide_id = models.TextField(blank=False, null=False)
    hgvsp_id = models.TextField(blank=True, null=True)
    md5sum = models.TextField(unique=True)


class LRGTranscript(models.Model):
    transcript = models.ForeignKey(Transcript, on_delete=models.CASCADE, related_name='lrg_transcripts')
    lrg_transcript_id = models.TextField(blank=False, null=False, unique=True)


class LRGHGVSC(models.Model):
    transcript = models.ForeignKey(LRGTranscript, on_delete=models.CASCADE, related_name='hgvsc')
    hgvsc_id = models.TextField(blank=False, null=False, unique=True)


class LRGPeptide(models.Model):
    transcript = models.ForeignKey(LRGTranscript, on_delete=models.CASCADE, related_name='peptides')
    peptide_id = models.TextField(blank=False, null=False)
    hgvsp_id = models.TextField(blank=True, null=True)
    md5sum = models.TextField(unique=True)


class AminoAcidChange(models.Model):
    long_name = models.TextField(blank=False, null=False, unique=True)
    short_name = models.TextField(blank=False, null=False)
    genes = models.ManyToManyField(Genes, related_name='aa_changes')
    transcript = models.ManyToManyField(
        'Transcript',
        through='AminoAcidTranscriptVariant',
        related_name='amino_acid_changes',
        blank=True
    )


class AminoAcidAnnotations(models.Model):
    gene = models.ForeignKey(Genes, on_delete=models.CASCADE, related_name="aa_annotations")
    amino_acid = models.ForeignKey(AminoAcidChange, on_delete=models.CASCADE, related_name="annotations")
    annotation = models.TextField(blank=False, null=False)
    priority = models.IntegerField(blank=False, null=False)
    user = models.ForeignKey(User, db_column="user", null=True, blank=True, on_delete=models.CASCADE)
    creation_timestamp = models.DateTimeField(db_column='creation_timestamp', auto_now_add=True)
    diagnosis = models.ForeignKey(DiagnosisCategory, blank=True, null=True, on_delete=models.CASCADE, related_name='aachange_annotations')
    ds_id = models.IntegerField(blank=True, null=True)
    tier = models.TextField(blank=True, null=True)
    tier_summary = models.TextField(blank=True, null=True)


class Variants(models.Model):
    md5sum = models.TextField(unique=True)
    chrom_pos_ref_alt = models.TextField()
    chr = models.TextField()
    start_pos = models.IntegerField()
    end_pos = models.IntegerField()
    ref_allele = models.TextField()
    alt_allele = models.TextField()
    gene = models.ForeignKey(Genes, on_delete=models.CASCADE, related_name='variants', blank=True, null=True)
    hgvsg_id = models.TextField()
    alt_hgvsg_id = models.TextField()
    refseq_hgvsg_id = models.TextField()
    lrg_hgvsg_id = models.TextField(blank=True, null=True)
    alt_chr = models.TextField()
    alt_chrom_pos_ref_alt = models.TextField()
    transcripts = models.ManyToManyField(
        'Transcript',
        through='AminoAcidTranscriptVariant',
        related_name='variants',
        blank=True
    )
    amino_acid_changes = models.ManyToManyField(
        'AminoAcidChange',
        through='AminoAcidTranscriptVariant',
        related_name='variants',
        blank=True
    )


class AminoAcidTranscriptVariant(models.Model):
    amino_acid = models.ForeignKey(
        AminoAcidChange,
        on_delete=models.CASCADE,
        related_name='aa_transcript_variants'
    )
    transcript = models.ForeignKey(
        Transcript,
        on_delete=models.CASCADE,
        related_name='aa_transcript_variants'
    )
    variant = models.ForeignKey(
        Variants,
        on_delete=models.CASCADE,
        related_name='aa_transcript_variants'
    )
    canonical = models.BooleanField(blank=False, null=False, default=False)


class AlfaData(models.Model):
    variant = models.ForeignKey(Variants, blank=True, null=True, on_delete=models.CASCADE, related_name='alfa')
    accession_number = models.TextField(null=False, blank=False)
    accession_number_version = models.TextField(null=False, blank=False)
    chrom = models.TextField(null=False, blank=False)
    start = models.IntegerField()
    end = models.IntegerField()
    ref = models.TextField(null=False, blank=False)
    alt = models.TextField(null=False, blank=False)
    rsid = models.TextField(null=False, blank=False)
    genbank = models.TextField(null=False, blank=False)
    variant_md5sum = models.TextField(null=False, blank=False, db_index=True)
    chrom_pos_ref_alt = models.TextField(null=False, blank=False, db_index=True)
    EUR = models.DecimalField(max_digits=6, decimal_places=3, null=False, blank=False)
    AFO = models.DecimalField(max_digits=6, decimal_places=3, null=False, blank=False)
    EAS = models.DecimalField(max_digits=6, decimal_places=3, null=False, blank=False)
    AFA = models.DecimalField(max_digits=6, decimal_places=3, null=False, blank=False)
    LAC = models.DecimalField(max_digits=6, decimal_places=3, null=False, blank=False)
    LEN = models.DecimalField(max_digits=6, decimal_places=3, null=False, blank=False)
    OAS = models.DecimalField(max_digits=6, decimal_places=3, null=False, blank=False)
    SAS = models.DecimalField(max_digits=6, decimal_places=3, null=False, blank=False)
    OTR = models.DecimalField(max_digits=6, decimal_places=3, null=False, blank=False)
    AFR = models.DecimalField(max_digits=6, decimal_places=3, null=False, blank=False)
    ASN = models.DecimalField(max_digits=6, decimal_places=3, null=False, blank=False)
    TOT = models.DecimalField(max_digits=6, decimal_places=3, null=False, blank=False)


class AnnovarData(models.Model):
    variant = models.ForeignKey(Variants, blank=True, null=True, on_delete=models.CASCADE, related_name='annovar')
    chrom_pos_ref_alt = models.TextField(null=False, blank=False, db_index=True)
    func_ref_gene = models.TextField()
    gene_ref_gene = models.TextField()
    gene_detail_ref_gene = models.TextField(null=True, blank=True)
    exonic_func_ref_gene = models.TextField()
    aa_change_ref_gene = models.TextField()
    genomic_super_dups = models.TextField(null=True, blank=True)
    ex_ac_all = models.TextField(null=True, blank=True)
    gnomad_exome_af_popmax = models.TextField(null=True, blank=True)
    gnomad_genome_af = models.TextField(null=True, blank=True)
    avsnp_150 = models.TextField(null=True, blank=True)
    cosmic_91_coding = models.TextField(null=True, blank=True)
    cosmic_91_noncoding = models.TextField(null=True, blank=True)
    sift_score = models.TextField(null=True, blank=True)
    sift_converted_rankscore = models.TextField(null=True, blank=True)
    sift_pred = models.TextField(null=True, blank=True)
    polyphen_2_hdiv_score = models.TextField(null=True, blank=True)
    polyphen_2_hdiv_rankscore = models.TextField(null=True, blank=True)
    polyphen_2_hdiv_pred = models.TextField(null=True, blank=True)
    polyphen_2_hvar_score = models.TextField(null=True, blank=True)
    polyphen_2_hvar_rankscore = models.TextField(null=True, blank=True)
    polyphen_2_hvar_pred = models.TextField(null=True, blank=True)
    lrt_score = models.TextField(null=True, blank=True)
    lrt_converted_rankscore = models.TextField(null=True, blank=True)
    lrt_pred = models.TextField(null=True, blank=True)
    mutation_taster_score = models.TextField(null=True, blank=True)
    mutation_taster_converted_rankscore = models.TextField(null=True, blank=True)
    mutation_taster_pred = models.TextField(null=True, blank=True)
    mutation_assessor_score = models.TextField(null=True, blank=True)
    mutation_assessor_score_rankscore = models.TextField(null=True, blank=True)
    mutation_assessor_pred = models.TextField(null=True, blank=True)
    fathmm_score = models.TextField(null=True, blank=True)
    fathmm_converted_rankscore = models.TextField(null=True, blank=True)
    fathmm_pred = models.TextField(null=True, blank=True)
    provean_score = models.TextField(null=True, blank=True)
    provean_converted_rankscore = models.TextField(null=True, blank=True)
    provean_pred = models.TextField(null=True, blank=True)
    vest_3_score = models.TextField(null=True, blank=True)
    vest_3_rankscore = models.TextField(null=True, blank=True)
    meta_svm_score = models.TextField(null=True, blank=True)
    meta_svm_rankscore = models.TextField(null=True, blank=True)
    meta_svm_pred = models.TextField(null=True, blank=True)
    meta_lr_score = models.TextField(null=True, blank=True)
    meta_lr_rankscore = models.TextField(null=True, blank=True)
    meta_lr_pred = models.TextField(null=True, blank=True)
    m_cap_score = models.TextField(null=True, blank=True)
    m_cap_rankscore = models.TextField(null=True, blank=True)
    m_cap_pred = models.TextField(null=True, blank=True)
    revel_score = models.TextField(null=True, blank=True)
    revel_rankscore = models.TextField(null=True, blank=True)
    mut_pred_score = models.TextField(null=True, blank=True)
    mut_pred_rankscore = models.TextField(null=True, blank=True)
    cadd_raw = models.TextField(null=True, blank=True)
    cadd_raw_rankscore = models.TextField(null=True, blank=True)
    cadd_phred = models.TextField(null=True, blank=True)
    dann_score = models.TextField(null=True, blank=True)
    dann_rankscore = models.TextField(null=True, blank=True)
    fathmm_mkl_coding_score = models.TextField(null=True, blank=True)
    fathmm_mkl_coding_rankscore = models.TextField(null=True, blank=True)
    fathmm_mkl_coding_pred = models.TextField(null=True, blank=True)
    eigen_coding_or_noncoding = models.TextField(null=True, blank=True)
    eigen_raw = models.TextField(null=True, blank=True)
    eigen_pc_raw = models.TextField(null=True, blank=True)
    geno_canyon_score = models.TextField(null=True, blank=True)
    geno_canyon_score_rankscore = models.TextField(null=True, blank=True)
    integrated_fit_cons_score = models.TextField(null=True, blank=True)
    integrated_fit_cons_score_rankscore = models.TextField(null=True, blank=True)
    integrated_confidence_value = models.TextField(null=True, blank=True)
    gerp_rs = models.TextField(null=True, blank=True)
    gerp_rs_rankscore = models.TextField(null=True, blank=True)
    phylo_p_100_way_vertebrate = models.TextField(null=True, blank=True)
    phylo_p_100_way_vertebrate_rankscore = models.TextField(null=True, blank=True)
    phylo_p_20_way_mammalian = models.TextField(null=True, blank=True)
    phylo_p_20_way_mammalian_rankscore = models.TextField(null=True, blank=True)
    phast_cons_100_way_vertebrate = models.TextField(null=True, blank=True)
    phast_cons_100_way_vertebrate_rankscore = models.TextField(null=True, blank=True)
    phast_cons_20_way_mammalian = models.TextField(null=True, blank=True)
    phast_cons_20_way_mammalian_rankscore = models.TextField(null=True, blank=True)
    si_phy_29_way_log_odds = models.TextField(null=True, blank=True)
    si_phy_29_way_log_odds_rankscore = models.TextField(null=True, blank=True)
    interpro_domain = models.TextField(null=True, blank=True)
    gt_ex_v_6_p_gene = models.TextField(null=True, blank=True)
    gt_ex_v_6_p_tissue = models.TextField(null=True, blank=True)
    cadd_16_gt_10 = models.TextField(null=True, blank=True)
    nci_60 = models.TextField(null=True, blank=True)
    clnalleleid = models.TextField(null=True, blank=True)
    clndn = models.TextField(null=True, blank=True)
    clndisdb = models.TextField(null=True, blank=True)
    clnrevstat = models.TextField(null=True, blank=True)
    clnsig = models.TextField(null=True, blank=True)


class Clinvar(models.Model):
    variant = models.ForeignKey(Variants, blank=True, null=True, on_delete=models.CASCADE, related_name='clinvar')
    clinvar_id          = models.TextField(null=False, blank=False)
    qual                = models.TextField(null=True, blank=True)
    filter              = models.TextField(null=True, blank=True)
    af_esp              = models.TextField(null=True, blank=True)
    af_exac             = models.TextField(null=True, blank=True)
    af_tgp              = models.TextField(null=True, blank=True)
    alleleid            = models.TextField(null=True, blank=True)
    clndisdb            = models.TextField(null=True, blank=True)
    clndisdbincl        = models.TextField(null=True, blank=True)
    clndn               = models.TextField(null=True, blank=True)
    clndnincl           = models.TextField(null=True, blank=True)
    clnhgvs             = models.TextField(null=True, blank=True)
    clnrevstat          = models.TextField(null=True, blank=True)
    clnsig              = models.TextField(null=True, blank=True)
    clnsigconf          = models.TextField(null=True, blank=True)
    clnsigincl          = models.TextField(null=True, blank=True)
    clnvc               = models.TextField(null=True, blank=True)
    clnvcso             = models.TextField(null=True, blank=True)
    clnvi               = models.TextField(null=True, blank=True)
    dbvarid             = models.TextField(null=True, blank=True)
    geneinfo            = models.TextField(null=True, blank=True)
    mc                  = models.TextField(null=True, blank=True)
    origin              = models.TextField(null=True, blank=True)
    rs_id               = models.TextField(null=True, blank=True)
    ssr                 = models.TextField(null=True, blank=True)
    chrom_pos_ref_alt   = models.TextField(null=False, blank=False)


class Dgidb(models.Model):
    gene                        = models.ForeignKey(Genes, related_name="dgi_db", on_delete=models.CASCADE)
    gene_name                   = models.TextField(null=False, blank=False)
    gene_claim_name             = models.TextField(null=True, blank=True)
    interaction_claim_source    = models.TextField(null=True, blank=True)
    interaction_types           = models.TextField(null=True, blank=True)
    drug_claim_name             = models.TextField(null=True, blank=True)
    drug_claim_primary_name     = models.TextField(null=True, blank=True)
    drug_name                   = models.TextField(null=True, blank=True)
    drug_concept_id             = models.TextField(null=True, blank=True)
    interaction_group_score     = models.TextField(null=True, blank=True)
    pmids                       = models.TextField(null=True, blank=True)


class CosmicTargetedPanel(models.Model):
    variant                     = models.ForeignKey(Variants, blank=True, null=True, on_delete=models.CASCADE, related_name='cosmic_targeted')
    gene                        = models.ForeignKey(Genes, blank=True, null=True, related_name="cosmic_targeted", on_delete=models.CASCADE)
    gene_name                   = models.TextField(null=False, blank=False)
    accession_number            = models.TextField(null=False, blank=False)
    gene_cds_length             = models.IntegerField(blank=True, null=True)
    primary_histology           = models.TextField(null=True, blank=True)
    histology_subtype_1         = models.TextField(null=True, blank=True)
    histology_subtype_2         = models.TextField(null=True, blank=True)
    histology_subtype_3         = models.TextField(null=True, blank=True)
    primary_site                = models.TextField(null=True, blank=True)
    site_subtype_1              = models.TextField(null=True, blank=True)
    site_subtype_2              = models.TextField(null=True, blank=True)
    site_subtype_3              = models.TextField(null=True, blank=True)
    genomic_mutation_id         = models.TextField(null=False, blank=False)
    genome_wide_screen          = models.BooleanField(blank=False, null=False, default=False)
    legacy_mutation_id          = models.TextField(null=True, blank=True)
    mutation_id                 = models.IntegerField(blank=True, null=True)
    mutation_cds                = models.TextField(null=True, blank=True)
    mutation_aa                 = models.TextField(null=True, blank=True)
    mutation_description        = models.TextField(null=True, blank=True)
    mutation_zygosity           = models.TextField(null=True, blank=True)
    mutation_genome_position    = models.TextField(null=True, blank=True)
    loh                         = models.TextField(null=True, blank=True)
    mutation_strand             = models.TextField(null=True, blank=True)
    resistance_mutation         = models.TextField(null=True, blank=True)
    fathmm_prediction           = models.TextField(null=True, blank=True)
    fathmm_score                = models.DecimalField(max_digits=7, decimal_places=1, null=True, blank=True)
    mutation_somatic_status     = models.TextField(null=True, blank=True)
    pubmed_pmid                 = models.TextField(null=True, blank=True)
    sample_type                 = models.TextField(null=True, blank=True)
    tumour_origin               = models.TextField(null=True, blank=True)
    age                         = models.IntegerField(blank=True, null=True)
    hgvsp_id                    = models.TextField(null=True, blank=True)
    hgvsc_id                    = models.TextField(null=True, blank=True)
    hgvsg_id                    = models.TextField(null=True, blank=True)
    hgnc_id                     = models.IntegerField(blank=True, null=True)


class CosmicGenomeScreen(models.Model):
    variant                     = models.ForeignKey(Variants, blank=True, null=True, on_delete=models.CASCADE, related_name='cosmic_genome')
    gene                        = models.ForeignKey(Genes, blank=True, null=True, related_name="cosmic_genome", on_delete=models.CASCADE)
    genomic_mutation_id         = models.TextField(null=False, blank=False)
    gene_name                   = models.TextField(null=False, blank=False)
    accession_number            = models.TextField(null=False, blank=False)
    gene_cds_length             = models.IntegerField(blank=True, null=True)
    primary_site                = models.TextField(null=True, blank=True)
    site_subtype_1              = models.TextField(null=True, blank=True)
    site_subtype_2              = models.TextField(null=True, blank=True)
    site_subtype_3              = models.TextField(null=True, blank=True)
    primary_histology           = models.TextField(null=True, blank=True)
    histology_subtype_1         = models.TextField(null=True, blank=True)
    histology_subtype_2         = models.TextField(null=True, blank=True)
    histology_subtype_3         = models.TextField(null=True, blank=True)
    genome_wide_screen          = models.BooleanField(blank=True, null=True)
    mutation_id                 = models.IntegerField(blank=True, null=True)
    mutation_cds                = models.TextField(null=True, blank=True)
    mutation_aa                 = models.TextField(null=True, blank=True)
    mutation_description        = models.TextField(null=True, blank=True)
    mutation_zygosity           = models.TextField(null=True, blank=True)
    mutation_genome_position    = models.TextField(null=True, blank=True)
    loh                         = models.TextField(null=True, blank=True)
    mutation_strand             = models.TextField(null=True, blank=True)
    snp                         = models.BooleanField(blank=True, null=True)
    fathmm_prediction           = models.TextField(null=True, blank=True)
    fathmm_score                = models.DecimalField(max_digits=7, decimal_places=1, null=True, blank=True)
    mutation_somatic_status     = models.TextField(null=True, blank=True)
    pubmed_pmid                 = models.TextField(null=True, blank=True)
    sample_type                 = models.TextField(null=True, blank=True)
    tumour_origin               = models.TextField(null=True, blank=True)
    age                         = models.IntegerField(blank=True, null=True)
    hgvsp_id                    = models.TextField(null=True, blank=True)
    hgvsc_id                    = models.TextField(null=True, blank=True)
    hgvsg_id                    = models.TextField(null=True, blank=True)
    hgnc_id                     = models.IntegerField(blank=True, null=True)


class CosmicNonCoding(models.Model):
    variant                     = models.ForeignKey(Variants, blank=True, null=True, on_delete=models.CASCADE, related_name='cosmic_noncoding')
    genomic_mutation_id         = models.TextField(null=False, blank=False)
    primary_site                = models.TextField(null=True, blank=True)
    site_subtype_1              = models.TextField(null=True, blank=True)
    site_subtype_2              = models.TextField(null=True, blank=True)
    site_subtype_3              = models.TextField(null=True, blank=True)
    primary_histology           = models.TextField(null=True, blank=True)
    histology_subtype_1         = models.TextField(null=True, blank=True)
    histology_subtype_2         = models.TextField(null=True, blank=True)
    histology_subtype_3         = models.TextField(null=True, blank=True)
    legacy_mutation_id          = models.TextField(null=True, blank=True)
    zygosity                    = models.TextField(null=True, blank=True)
    genome_position             = models.TextField(null=True, blank=True)
    mutation_somatic_status     = models.TextField(null=True, blank=True)
    wt_seq                      = models.TextField(null=True, blank=True)
    mut_seq                     = models.TextField(null=True, blank=True)
    fathmm_mkl_non_coding_score = models.DecimalField(max_digits=7, decimal_places=1, null=True, blank=True)
    fathmm_mkl_non_coding_group = models.TextField(null=True, blank=True)
    fathmm_mkl_coding_score     = models.DecimalField(max_digits=7, decimal_places=1, null=True, blank=True)
    fathmm_mkl_coding_group     = models.TextField(null=True, blank=True)
    whole_genome_refseq         = models.BooleanField(blank=False, null=False, default=False)
    whole_exome                 = models.BooleanField(blank=False, null=False, default=False)
    pubmed_pmid                 = models.TextField(null=True, blank=True)
    hgvsg_id                    = models.TextField(null=True, blank=True)


class CosmicResistanceMutation(models.Model):
    variant             = models.ForeignKey(Variants, blank=True, null=True, on_delete=models.CASCADE, related_name='cosmic_resistance')
    gene_name           = models.TextField(null=True, blank=True)
    transcript          = models.TextField(null=True, blank=True)
    census_gene         = models.BooleanField(blank=False, null=False, default=False)
    drug_name           = models.TextField(null=True, blank=True)
    histology           = models.TextField(null=True, blank=True)
    histology_subtype_1 = models.TextField(null=True, blank=True)
    histology_subtype_2 = models.TextField(null=True, blank=True)
    zygosity            = models.TextField(null=True, blank=True)
    genome_coordinates  = models.TextField(null=True, blank=True)
    mutation_id         = models.TextField(null=True, blank=True)
    genomic_mutation_id = models.TextField(null=True, blank=True)
    pubmed_pmid         = models.TextField(null=True, blank=True)
    sample_type         = models.TextField(null=True, blank=True)
    somatic_status      = models.TextField(null=True, blank=True)
    primary_tissue      = models.TextField(null=True, blank=True)
    tissue_subtype_1    = models.TextField(null=True, blank=True)
    tissue_subtype_2    = models.TextField(null=True, blank=True)
    legacy_mutation_id  = models.TextField(null=True, blank=True)
    aa_mutation         = models.TextField(null=True, blank=True)
    cds_mutation        = models.TextField(null=True, blank=True)
    tier                = models.IntegerField(blank=True, null=True)
    cgp_study           = models.TextField(null=True, blank=True)

    hgvsp_id            = models.TextField(null=True, blank=True)
    hgvsc_id            = models.TextField(null=True, blank=True)
    hgvsg_id            = models.TextField(null=True, blank=True)


class Gnomad(models.Model):
    variant                         = models.OneToOneField(Variants, blank=True, null=True, on_delete=models.CASCADE, related_name='gnomad')
    rs_id                           = models.TextField(null=True, blank=True)
    qual                            = models.TextField(null=True, blank=True)
    filter                          = models.TextField(null=True, blank=True)
    gnomad_source_version           = models.TextField(null=True, blank=True)
    annotation_type                 = models.TextField(null=True, blank=True)
    af                              = models.TextField(null=True, blank=True)
    af_non_neuro_nfe                = models.TextField(null=True, blank=True)
    af_non_neuro_nfe_XY             = models.TextField(null=True, blank=True)
    af_non_v2                       = models.TextField(null=True, blank=True)
    af_non_topmed_sas               = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_XY     = models.TextField(null=True, blank=True)
    af_sas_XY                       = models.TextField(null=True, blank=True)
    af_non_v2_raw                   = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_raw    = models.TextField(null=True, blank=True)
    af_non_topmed_eas               = models.TextField(null=True, blank=True)
    af_non_neuro_sas                = models.TextField(null=True, blank=True)
    af_non_cancer_nfe_XY            = models.TextField(null=True, blank=True)
    af_non_cancer_XY                = models.TextField(null=True, blank=True)
    af_non_v2_sas                   = models.TextField(null=True, blank=True)
    af_sas                          = models.TextField(null=True, blank=True)
    af_non_cancer_eas               = models.TextField(null=True, blank=True)
    af_non_topmed_XY                = models.TextField(null=True, blank=True)
    af_non_neuro                    = models.TextField(null=True, blank=True)
    af_non_v2_XY                    = models.TextField(null=True, blank=True)
    af_non_cancer_sas_XY            = models.TextField(null=True, blank=True)
    af_non_topmed                   = models.TextField(null=True, blank=True)
    af_non_cancer_raw               = models.TextField(null=True, blank=True)
    af_non_topmed_sas_XY            = models.TextField(null=True, blank=True)
    af_non_neuro_eas_XY             = models.TextField(null=True, blank=True)
    af_XY                           = models.TextField(null=True, blank=True)
    af_non_topmed_eas_XY            = models.TextField(null=True, blank=True)
    af_eas                          = models.TextField(null=True, blank=True)
    af_non_cancer_sas               = models.TextField(null=True, blank=True)
    af_raw                          = models.TextField(null=True, blank=True)
    af_eas_XY                       = models.TextField(null=True, blank=True)
    af_non_v2_nfe_XY                = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_sas    = models.TextField(null=True, blank=True)
    af_non_cancer_nfe               = models.TextField(null=True, blank=True)
    af_non_neuro_sas_XY             = models.TextField(null=True, blank=True)
    af_non_topmed_raw               = models.TextField(null=True, blank=True)
    af_non_cancer_eas_XY            = models.TextField(null=True, blank=True)
    af_non_cancer                   = models.TextField(null=True, blank=True)
    af_non_v2_sas_XY                = models.TextField(null=True, blank=True)
    af_non_neuro_eas                = models.TextField(null=True, blank=True)
    af_controls_and_biobanks        = models.TextField(null=True, blank=True)
    af_nfe_XY                       = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_sas_XY = models.TextField(null=True, blank=True)
    af_non_v2_nfe                   = models.TextField(null=True, blank=True)
    af_non_neuro_raw                = models.TextField(null=True, blank=True)
    af_non_neuro_XY                 = models.TextField(null=True, blank=True)
    af_nfe                          = models.TextField(null=True, blank=True)
    af_non_v2_XX                    = models.TextField(null=True, blank=True)
    af_non_topmed_nfe_XX            = models.TextField(null=True, blank=True)
    af_amr_XY                       = models.TextField(null=True, blank=True)
    af_non_v2_nfe_XX                = models.TextField(null=True, blank=True)
    af_non_neuro_XX                 = models.TextField(null=True, blank=True)
    af_nfe_XX                       = models.TextField(null=True, blank=True)
    af_non_v2_amr                   = models.TextField(null=True, blank=True)
    af_non_neuro_nfe_XX             = models.TextField(null=True, blank=True)
    af_XX                           = models.TextField(null=True, blank=True)
    af_non_topmed_nfe               = models.TextField(null=True, blank=True)
    af_amr                          = models.TextField(null=True, blank=True)
    af_non_cancer_nfe_XX            = models.TextField(null=True, blank=True)
    af_non_topmed_XX                = models.TextField(null=True, blank=True)
    af_non_v2_amr_XY                = models.TextField(null=True, blank=True)
    af_non_cancer_amr               = models.TextField(null=True, blank=True)
    af_non_neuro_amr_XY             = models.TextField(null=True, blank=True)
    af_non_cancer_amr_XY            = models.TextField(null=True, blank=True)
    af_non_neuro_amr                = models.TextField(null=True, blank=True)
    af_non_cancer_XX                = models.TextField(null=True, blank=True)
    af_non_cancer_eas_XX            = models.TextField(null=True, blank=True)
    af_non_topmed_amr_XY            = models.TextField(null=True, blank=True)
    af_amr_XX                       = models.TextField(null=True, blank=True)
    af_non_topmed_amr_XX            = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_nfe_XX = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_amr_XX = models.TextField(null=True, blank=True)
    af_non_topmed_amr               = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_amr    = models.TextField(null=True, blank=True)
    af_non_neuro_amr_XX             = models.TextField(null=True, blank=True)
    af_non_v2_eas_XX                = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_amr_XY = models.TextField(null=True, blank=True)
    af_non_v2_eas                   = models.TextField(null=True, blank=True)
    af_non_neuro_eas_XX             = models.TextField(null=True, blank=True)
    af_non_cancer_amr_XX            = models.TextField(null=True, blank=True)
    af_eas_XX                       = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_nfe    = models.TextField(null=True, blank=True)
    af_non_v2_amr_XX                = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_XX     = models.TextField(null=True, blank=True)
    af_non_v2_eas_XY                = models.TextField(null=True, blank=True)
    af_non_neuro_asj_XY             = models.TextField(null=True, blank=True)
    af_non_v2_asj                   = models.TextField(null=True, blank=True)
    af_non_v2_asj_XY                = models.TextField(null=True, blank=True)
    af_asj_XY                       = models.TextField(null=True, blank=True)
    af_non_cancer_asj_XY            = models.TextField(null=True, blank=True)
    af_non_topmed_asj               = models.TextField(null=True, blank=True)
    af_asj                          = models.TextField(null=True, blank=True)
    af_non_topmed_asj_XY            = models.TextField(null=True, blank=True)
    af_non_neuro_asj                = models.TextField(null=True, blank=True)
    af_non_cancer_asj               = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_eas    = models.TextField(null=True, blank=True)
    af_non_topmed_eas_XX            = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_eas_XX = models.TextField(null=True, blank=True)
    af_non_topmed_nfe_XY            = models.TextField(null=True, blank=True)
    af_oth                          = models.TextField(null=True, blank=True)
    af_non_v2_oth                   = models.TextField(null=True, blank=True)
    af_non_cancer_oth_XY            = models.TextField(null=True, blank=True)
    af_non_v2_afr                   = models.TextField(null=True, blank=True)
    af_non_cancer_afr               = models.TextField(null=True, blank=True)
    af_non_v2_oth_XY                = models.TextField(null=True, blank=True)
    af_non_v2_afr_XX                = models.TextField(null=True, blank=True)
    af_afr                          = models.TextField(null=True, blank=True)
    af_non_neuro_afr_XX             = models.TextField(null=True, blank=True)
    af_oth_XY                       = models.TextField(null=True, blank=True)
    af_non_neuro_oth                = models.TextField(null=True, blank=True)
    af_afr_XX                       = models.TextField(null=True, blank=True)
    af_non_cancer_afr_XX            = models.TextField(null=True, blank=True)
    af_non_cancer_oth               = models.TextField(null=True, blank=True)
    af_non_neuro_afr                = models.TextField(null=True, blank=True)
    af_non_neuro_oth_XY             = models.TextField(null=True, blank=True)
    af_non_cancer_fin_XX            = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_eas_XY = models.TextField(null=True, blank=True)
    af_non_neuro_sas_XX             = models.TextField(null=True, blank=True)
    af_non_cancer_asj_XX            = models.TextField(null=True, blank=True)
    af_fin_XX                       = models.TextField(null=True, blank=True)
    af_fin                          = models.TextField(null=True, blank=True)
    af_asj_XX                       = models.TextField(null=True, blank=True)
    af_sas_XX                       = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_sas_XX = models.TextField(null=True, blank=True)
    af_non_neuro_asj_XX             = models.TextField(null=True, blank=True)
    af_non_v2_sas_XX                = models.TextField(null=True, blank=True)
    af_non_topmed_fin               = models.TextField(null=True, blank=True)
    af_non_v2_asj_XX                = models.TextField(null=True, blank=True)
    af_non_cancer_sas_XX            = models.TextField(null=True, blank=True)
    af_non_topmed_fin_XX            = models.TextField(null=True, blank=True)
    af_non_topmed_sas_XX            = models.TextField(null=True, blank=True)
    af_non_cancer_fin               = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_nfe_XY = models.TextField(null=True, blank=True)
    af_non_neuro_afr_XY             = models.TextField(null=True, blank=True)
    af_oth_XX                       = models.TextField(null=True, blank=True)
    af_non_v2_afr_XY                = models.TextField(null=True, blank=True)
    af_afr_XY                       = models.TextField(null=True, blank=True)
    af_non_cancer_oth_XX            = models.TextField(null=True, blank=True)
    af_non_neuro_oth_XX             = models.TextField(null=True, blank=True)
    af_non_cancer_afr_XY            = models.TextField(null=True, blank=True)
    af_non_cancer_fin_XY            = models.TextField(null=True, blank=True)
    af_non_topmed_asj_XX            = models.TextField(null=True, blank=True)
    af_fin_XY                       = models.TextField(null=True, blank=True)
    af_non_v2_fin                   = models.TextField(null=True, blank=True)
    af_non_topmed_fin_XY            = models.TextField(null=True, blank=True)
    af_non_v2_fin_XY                = models.TextField(null=True, blank=True)
    af_non_neuro_fin                = models.TextField(null=True, blank=True)
    af_non_topmed_afr_XX            = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_afr    = models.TextField(null=True, blank=True)
    af_non_v2_oth_XX                = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_afr_XY = models.TextField(null=True, blank=True)
    af_non_neuro_fin_XX             = models.TextField(null=True, blank=True)
    af_non_neuro_fin_XY             = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_fin    = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_afr_XX = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_fin_XX = models.TextField(null=True, blank=True)
    af_non_topmed_afr               = models.TextField(null=True, blank=True)
    af_non_topmed_afr_XY            = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_oth    = models.TextField(null=True, blank=True)
    af_non_topmed_oth               = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_oth_XY = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_fin_XY = models.TextField(null=True, blank=True)
    af_non_topmed_oth_XY            = models.TextField(null=True, blank=True)
    af_ami                          = models.TextField(null=True, blank=True)
    af_ami_XY                       = models.TextField(null=True, blank=True)
    af_non_v2_ami                   = models.TextField(null=True, blank=True)
    af_non_neuro_ami_XY             = models.TextField(null=True, blank=True)
    af_non_cancer_ami               = models.TextField(null=True, blank=True)
    af_non_neuro_ami                = models.TextField(null=True, blank=True)
    af_non_cancer_ami_XY            = models.TextField(null=True, blank=True)
    af_ami_XX                       = models.TextField(null=True, blank=True)
    af_non_cancer_ami_XX            = models.TextField(null=True, blank=True)
    af_non_v2_ami_XX                = models.TextField(null=True, blank=True)
    af_non_neuro_ami_XX             = models.TextField(null=True, blank=True)
    af_non_v2_ami_XY                = models.TextField(null=True, blank=True)
    af_non_v2_mid                   = models.TextField(null=True, blank=True)
    af_non_topmed_mid_XY            = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_ami    = models.TextField(null=True, blank=True)
    af_non_topmed_mid               = models.TextField(null=True, blank=True)
    af_non_neuro_mid                = models.TextField(null=True, blank=True)
    af_mid_XY                       = models.TextField(null=True, blank=True)
    af_non_cancer_mid               = models.TextField(null=True, blank=True)
    af_non_v2_mid_XY                = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_mid    = models.TextField(null=True, blank=True)
    af_mid                          = models.TextField(null=True, blank=True)
    af_mid_XX                       = models.TextField(null=True, blank=True)
    af_non_v2_fin_XX                = models.TextField(null=True, blank=True)
    af_non_topmed_ami               = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_ami_XY = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_mid_XX = models.TextField(null=True, blank=True)
    af_non_neuro_mid_XY             = models.TextField(null=True, blank=True)
    af_non_v2_mid_XX                = models.TextField(null=True, blank=True)
    af_non_topmed_mid_XX            = models.TextField(null=True, blank=True)
    af_non_topmed_oth_XX            = models.TextField(null=True, blank=True)
    af_non_cancer_mid_XX            = models.TextField(null=True, blank=True)
    af_non_topmed_ami_XY            = models.TextField(null=True, blank=True)
    af_non_neuro_mid_XX             = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_oth_XX = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_asj_XX = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_mid_XY = models.TextField(null=True, blank=True)
    af_non_cancer_mid_XY            = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_asj_XY = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_asj    = models.TextField(null=True, blank=True)
    af_non_topmed_ami_XX            = models.TextField(null=True, blank=True)
    af_controls_and_biobanks_ami_XX = models.TextField(null=True, blank=True)
    af_popmax                       = models.TextField(null=True, blank=True)
    chrom_pos_ref_alt               = models.TextField(null=True, blank=True)
